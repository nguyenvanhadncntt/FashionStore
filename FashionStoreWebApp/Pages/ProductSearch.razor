@page "/search-product";
@using FashionStoreViewModel;
@using FashionStoreWebApp.Services;
@using FashionStoreWebApp.Helpers;
@using FashionStoreWebApp.Constants;
@using FashionStoreViewModel.Enumerations;
@inject IJSRuntime JS;
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs;

@inject NavigationManager Navigation;
@inject IToastService ToastService;
@inject IProductService ProductService;
@inject ICategoryService CategoryService;
@inject IBrandService BrandService;
@inject ICartService CartService;
@inject AuthenticationStateProvider AuthStateProvider;

<PageTitle>Product Search</PageTitle>

<!-- Breadcrumb Section Begin -->
<section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>Search Products</h4>
                    <div class="breadcrumb__links">
                        <a href="/">Home</a>
                        <span>Products</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- Breadcrumb Section End -->
<!-- Shop Section Begin -->
<section class="shop spad">
    <div class="container">
        <div class="row">
            <div class="col-lg-3">
                <div class="shop__sidebar">
                    <div class="shop__sidebar__search">
                        <form action="#">
                            <input type="text" placeholder="Search..." @oninput="OnInputSearchTerm">
                            <button type="submit"><span class="icon_search"></span></button>
                        </form>
                    </div>
                    <div class="shop__sidebar__accordion">
                        <div class="accordion" id="accordionExample">
                            <div class="card">
                                <div class="card-heading">
                                    <a data-toggle="collapse" data-target="#collapseOne">Categories</a>
                                </div>
                                <div id="collapseOne" class="collapse show" data-parent="#accordionExample">
                                    <div class="card-body" style="overflow-y: scroll">
                                        <div class="shop__sidebar__categories">
                                            <ul class="nice-scroll">
                                                @foreach(var category in Categories) {
                                                    <li class="pointer" @onclick="() => SelectCategory(category.Id)">
                                                        <a class="@(CategoryIdSelected == category.Id ? "link-active" : "")">@category.Name</a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card">
                                <div class="card-heading">
                                    <a data-toggle="collapse" data-target="#collapseTwo">Branding</a>
                                </div>
                                <div id="collapseTwo" class="collapse show" data-parent="#accordionExample">
                                    <div class="card-body" style="overflow-y: scroll">
                                        <div class="shop__sidebar__categories">
                                            <ul class="nice-scroll">
                                                @foreach (var brand in Brands)
                                                {
                                                    <li class="pointer" @onclick="() => SelectBrand(brand.Id)">
                                                        <a class="@(BrandIdSelected == brand.Id ? "link-active" : "")">@brand.Name</a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card">
                                <div class="card-heading">
                                    <a data-toggle="collapse" data-target="#collapseThree">Filter Price</a>
                                </div>
                                <div id="collapseThree" class="collapse show" data-parent="#accordionExample">
                                    <div class="card-body">
                                        <div class="shop__sidebar__price">
                                            <ul>
                                                <li><a href="#">$0.00 - $50.00</a></li>
                                                <li><a href="#">$50.00 - $100.00</a></li>
                                                <li><a href="#">$100.00 - $150.00</a></li>
                                                <li><a href="#">$150.00 - $200.00</a></li>
                                                <li><a href="#">$200.00 - $250.00</a></li>
                                                <li><a href="#">250.00+</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card">
                                <div class="card-heading">
                                    <a data-toggle="collapse" data-target="#collapseFour">Size</a>
                                </div>
                                <div id="collapseFour" class="collapse show" data-parent="#accordionExample">
                                    <div class="card-body">
                                        <div class="shop__sidebar__size">
                                            <label for="xs">
                                                xs
                                                <input type="radio" id="xs">
                                            </label>
                                            <label for="sm">
                                                s
                                                <input type="radio" id="sm">
                                            </label>
                                            <label for="md">
                                                m
                                                <input type="radio" id="md">
                                            </label>
                                            <label for="xl">
                                                xl
                                                <input type="radio" id="xl">
                                            </label>
                                            <label for="2xl">
                                                2xl
                                                <input type="radio" id="2xl">
                                            </label>
                                            <label for="xxl">
                                                xxl
                                                <input type="radio" id="xxl">
                                            </label>
                                            <label for="3xl">
                                                3xl
                                                <input type="radio" id="3xl">
                                            </label>
                                            <label for="4xl">
                                                4xl
                                                <input type="radio" id="4xl">
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-9">
                <div class="shop__product__option">
                    <div class="row">
                        <div class="col-lg-6 col-md-6 col-sm-6">
                            <div class="shop__product__option__left">
                                <p>@ShowingResultMsg()</p>
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6">
                            <div class="shop__product__option__right">
                                <p>Sort by Price:</p>
                                <InputSelect @bind-value="isPriceAscSort" @bind-value:after="() => FetchProducts()">
                                    <option value="true">Low To High</option>
                                    <option value="false">High To Low</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    @foreach(var product in PagingProducts.Items) {
                        <div class="col-lg-4 col-md-6 col-sm-6">
                            <div class="product__item">
                                <div class="product__item__pic set-bg" style="background-image: url('@GetImageUrl(product.ImageUrl)');">
                                    <ul class="product__hover">
                                        <li><a href="#"><img src="img/icon/heart.png" alt=""></a></li>
                                        <li><a href="#"><img src="img/icon/compare.png" alt=""> <span>Compare</span></a></li>
                                        <li><a href="#"><img src="img/icon/search.png" alt=""></a></li>
                                    </ul>
                                </div>
                                <div class="product__item__text">
                                    <h6>@product.Name</h6>
                                    <a @onclick="() => AddToCart(product.Id)" class="add-cart pointer">+ Add To Cart</a>
                                    <div class="rating">
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                    </div>
                                    <h5>$@product.Price</h5>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                @if (PagingProducts.TotalPages > 0) {
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="product__pagination">
                                @foreach (var i in PagingNumbers)
                                {
                                    <a class="@(i == CurrentPage ? "active" : "")" @onclick="() => GoToPage(i)">@i</a>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>
<!-- Shop Section End -->

@code {
    private int CurrentPage = 1;
    private int PageSize = 9;
    private long CategoryIdSelected = ConstantValues.ZERO;
    private long BrandIdSelected = ConstantValues.ZERO;
    private string SearchTerm = string.Empty;
    private bool isPriceAscSort = true;

    private IList<BrandVm> Brands = new List<BrandVm>();
    private IList<CategoryVm> Categories = new List<CategoryVm>();

    private PagingData<ProductVm> PagingProducts = new PagingData<ProductVm>([], ConstantValues.ZERO, ConstantValues.FIRST_PAGE, 9);

    private int[] PagingNumbers = ConstantValues.PAGING_NUMBERS_DEFAULT;
    AuthenticationState AuthState;

    protected override async Task OnInitializedAsync()
    {
        AuthState = await AuthStateProvider.GetAuthenticationStateAsync();
        await FetchCategories();
        await FetchBrands();
        await FetchProducts();
    }

    private async Task FetchProducts()
    {
        PagingProducts = await ProductService.SearchProduct(new ProductSearchRequest() {
				name = SearchTerm,
                categoryId = CategoryIdSelected,
				brandId = BrandIdSelected
        }, CurrentPage, PageSize, "Price", isPriceAscSort);
        GeneratePageNumberItems();
        StateHasChanged();
    }

    private async Task FetchCategories()
    {
        var PagingCategories = await CategoryService.GetCategoriesAsync(string.Empty, ConstantValues.FIRST_PAGE, ConstantValues.MAX_PAGE_SIZE);
        Categories = PagingCategories.Items;
    }

    private async Task FetchBrands()
    {
        var PagingBrands = await BrandService.GetBrands(string.Empty, ConstantValues.FIRST_PAGE, ConstantValues.MAX_PAGE_SIZE);
        Brands = PagingBrands.Items;
    }

	private async Task SelectCategory(long categoryId)
	{
		CategoryIdSelected = categoryId == CategoryIdSelected ? ConstantValues.ZERO : categoryId;
		await FetchProducts();
	}

	private async Task SelectBrand(long brandId) {
		BrandIdSelected = brandId == BrandIdSelected ? ConstantValues.ZERO : brandId;
        await FetchProducts();
    }

    private async Task GoToPage(int page)
    {
        CurrentPage = page;
        await FetchProducts();
    }

    private async Task OnInputSearchTerm(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString();
        await FetchProducts();
    }

    private void GeneratePageNumberItems()
    {
        if (PagingProducts.TotalPages > 0)
        {
            var pages = new List<int>();
            for (int i = 1; i <= PagingProducts.TotalPages; i++)
            {
                pages.Add(i);
            }
            PagingNumbers = pages.ToArray();
        }
        else
        {
            PagingNumbers = ConstantValues.PAGING_NUMBERS_DEFAULT;
        }
    }

    private string GetImageUrl(string imageName)
    {
        return $"{ConstantValues.BACKEND_URL}/{imageName}";
    }

	private string ShowingResultMsg()
	{
		var startElementNumber = (CurrentPage - 1) * PageSize + 1;
        var endElementNumber = startElementNumber + PagingProducts.Items.Count - 1;
        return $"Showing {startElementNumber} - {endElementNumber} of {PagingProducts.TotalCount} results";
	}

    private async Task AddToCart(long productId)
    {
        if (!AuthState.User.Identity.IsAuthenticated)
        {
            ToastService.ShowError("Please login to add product to cart.");
            return;
        }

        var result = await CartService.AddToCart(new CartVm()
            {
                ProductId = productId,
                Quantity = ConstantValues.ONE,
            });

        if (result.Succeeded)
        {
            ToastService.ShowSuccess("Product added to cart successfully.");
        }
        else
        {
            ToastService.ShowError("Failed to add product to cart.");
        }
    }
}

@page "/admin/brands"
@using FashionStoreViewModel;
@using FashionStoreWebApp.Services;
@using FashionStoreWebApp.Helpers;
@using FashionStoreWebApp.Constants;
@using FashionStoreViewModel.Enumerations;
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs;


@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject IToastService ToastService
@inject IBrandService BrandService

<h3>Brands Management</h3>

<!-- Search Box -->
<div class="my-4 row">
    <div class="col-5">
        <input type="text" class="form-control" placeholder="Search brands..."
        @bind="SearchQuery" @oninput="OnInputSearch" />
    </div>
    <div class="col-auto ml-auto">
        <button class="btn btn-primary" @onclick="() => OpenModal(null, ModalType.Edit)">Add new brand</button>
    </div>
</div>

<!-- Brands Table -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Description</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (PagingBrand.TotalCount == 0)
        {
            <tr>
                <td colspan="4" class="text-center">No brands found.</td>
            </tr>
        }
        else
        {
            @foreach (var brand in PagingBrand.Items)
            {
                <tr>
                    <td>@brand.Id</td>
                    <td>@brand.Name</td>
                    <td>@brand.Description</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => OpenModal(brand, ModalType.Edit)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => OpenModal(brand,  ModalType.Delete)">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div class="modal @(IsOpenDeleteModal ? "show" : "hide")" tabindex="-1" role="dialog" id="deleteModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the brand "<strong>@BrandToDelete?.Name</strong>"?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => closeModal(ModalType.Delete)">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

<div class="modal @(IsOpenEditModal ? "show" : "hide")" tabindex="-1" role="dialog" id="EditModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm id="editBrandForm" Model="BrandSelected" OnValidSubmit="SaveBrand">
                <ChildContent Context="formContext">
                    <div class="modal-header">
                        <h5 class="modal-title">@(BrandSelected.Id == 0 ? "Add New Brand" : $"Edit brand {BrandSelected.Name}")</h5>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="name" name="name" @bind="BrandSelected.Name" required />
                            <ValidationMessage For="@(() => BrandSelected.Name)" />
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea type="text" class="form-control" id="description" name="description" @bind="BrandSelected.Description" required />
                            <ValidationMessage For="@(() => BrandSelected.Description)" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => closeModal(ModalType.Edit)">Cancel</button>
                        <button type="submit" class="btn btn-danger">Save</button>
                    </div>
                </ChildContent>
            </EditForm>
        </div>
    </div>
</div>
<!-- Pagination -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="PreviousPage">Previous</button>
        </li>
        @foreach (var number in PagingNumbers)
        {
            <li class="page-item @(number == CurrentPage ? "active" : "")">
                <button class="page-link" @onclick="() => GoToPage(number)">@number</button>
            </li>
        }
        <li class="page-item @(CurrentPage == PagingBrand.TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="NextPage">Next</button>
        </li>
    </ul>
</nav>

@code {
    private int CurrentPage = ConstantValues.FIRST_PAGE;
    private int PageSize = ConstantValues.PAGE_SIZE;
    private string SearchQuery = string.Empty;
    private bool IsOpenDeleteModal = false;
    private BrandVm BrandToDelete { get; set; }

    private bool IsOpenEditModal = false;
    private BrandVm BrandSelected;
    private PagingData<BrandVm> PagingBrand = new PagingData<BrandVm>(
        [], ConstantValues.ZERO, ConstantValues.FIRST_PAGE, ConstantValues.PAGE_SIZE);
    private int[] PagingNumbers = ConstantValues.PAGING_NUMBERS_DEFAULT;

    protected override async Task OnInitializedAsync()
    {
        await LoadBrands();
    }

    private async Task LoadBrands()
    {
        PagingBrand = await BrandService.GetBrands(SearchQuery, CurrentPage, PageSize);
        GeneratePageNumberItems();
		StateHasChanged();
    }

    private async void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadBrands();
        }
    }

    private async void NextPage()
    {
        if (CurrentPage < PagingBrand.TotalPages)
        {
            CurrentPage++;
            await LoadBrands();
        }
    }

    private async void GoToPage(int page)
    {
        CurrentPage = page;
        await LoadBrands();
    }

    private async Task OnInputSearch(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString();

        await LoadBrands();
    }

    // Open Delete Modal
    private void OpenModal(BrandVm brand, ModalType modalType)
    {
        if (modalType == ModalType.Edit)
        {
            IsOpenEditModal = true;
            BrandSelected = brand ?? new BrandVm();
        }
        else
        {
            IsOpenDeleteModal = true;
            BrandToDelete = brand;
        }
    }

    // Confirm Delete
    private async Task ConfirmDelete()
    {
        if (BrandToDelete != null)
        {
            var result = await BrandService.Delete(BrandToDelete.Id);
            if (result.Succeeded) {
                ToastService.ShowSuccess($"Delete brand {BrandToDelete.Name} successfully !!!");
                BrandToDelete = null;
                await LoadBrands(); // Refresh the list after deletion
            } else {
                foreach (var error in result.ErrorList)
                {
                    ToastService.ShowError(error);
                }
            }
        }
        closeModal(ModalType.Delete);
    }

    private void closeModal(ModalType modalType)
    {
        if (modalType == ModalType.Edit)
        {
            IsOpenEditModal = false;
            BrandSelected = null;
        }
        else if (modalType == ModalType.Delete)
        {
            IsOpenDeleteModal = false;
            BrandToDelete = null;
        }
    }

    private async Task SaveBrand()
    {
        if (BrandSelected.Id == 0)
        {
            var result = await BrandService.CreateBrandAsync(BrandSelected);
            if (result.Succeeded)
            {
				ToastService.ShowSuccess("Create new brand successfully !!!");
            } else {
                foreach (var error in result.ErrorList)
                {
                    ToastService.ShowError(error);
                }
            }
        }
        else
        {
            var result = await BrandService.UpdateBrandAsync(BrandSelected);
            if (result.Succeeded) {
                ToastService.ShowSuccess($"Edit brand {BrandSelected.Name} successfully !!!");
                BrandSelected = null;
            } else {
                foreach (var error in result.ErrorList)
                {
                    ToastService.ShowError(error);
                }
            }
        }
        closeModal(ModalType.Edit);
        await LoadBrands();
    }

    private void GeneratePageNumberItems()
    {
        if (PagingBrand.TotalPages > 0)
        {
            var pages = new List<int>();
            for (int i = 1; i <= PagingBrand.TotalPages; i++)
            {
                pages.Add(i);
            }
            PagingNumbers = pages.ToArray();
        }
        else
        {
            PagingNumbers = ConstantValues.PAGING_NUMBERS_DEFAULT;
        }
    }
}

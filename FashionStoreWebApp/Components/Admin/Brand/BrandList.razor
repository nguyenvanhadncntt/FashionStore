@page "/brands"
@using FashionStoreViewModel;
@using FashionStoreWebApp.Services

@inject NavigationManager Navigation

@inject IBrandService BrandService

<h3>Brands</h3>

<!-- Search Box -->
<div class="mb-3">
    <input type="text" class="form-control" placeholder="Search brands..." 
        @bind="SearchQuery" @oninput="LoadBrands" />
</div>

<!-- Brands Table -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Description</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (PagingBrand.TotalCount == 0)
        {
            <tr>
                <td colspan="4" class="text-center">No brands found.</td>
            </tr>
        }
        else
        {
            @foreach (var brand in PagingBrand.Items)
            {
                <tr>
                    <td>@brand.Id</td>
                    <td>@brand.Name</td>
                    <td>@brand.Description</td>
                    <td></td>
                </tr>
            }
        }
    </tbody>
</table>

<!-- Pagination -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="PreviousPage">Previous</button>
        </li>
        @for (int i = 1; i <= PagingBrand.TotalPages; i++)
        {
            <li class="page-item @(i == CurrentPage ? "active" : "")">
                <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="NextPage">Next</button>
        </li>
    </ul>
</nav>

@code {
    private int CurrentPage = 1;
    private int PageSize = 5;
    private int TotalBrands = 0;
    private string SearchQuery = string.Empty;
    private PagingData<BrandVm> PagingBrand = new PagingData<BrandVm>([], 0, 1, 5);

    protected override async Task OnInitializedAsync()
    {
        await LoadBrands();
    }

    private async Task LoadBrands()
    {
        PagingBrand = await BrandService.getBrands(SearchQuery, CurrentPage, PageSize);
        TotalBrands = PagingBrand.TotalCount;
    }

    private int TotalPages => (int)Math.Ceiling(TotalBrands / (double)PageSize);

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            LoadBrands();
        }
    }

    private void NextPage()
    {
        if (CurrentPage < PagingBrand.TotalPages)
        {
            CurrentPage++;
            LoadBrands();
        }
    }

    private void GoToPage(int page)
    {
        CurrentPage = page;
        LoadBrands();
    }
    
}
